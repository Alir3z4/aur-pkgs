#!/bin/sh
ver=0.7.10
#
# AurUp, a tool to upload packages to AUR
#        provided by Pierluigi, mOLOk and Dundee
#
# This is free software.  You may redistribute
# copies of it under the terms of the GNU
# General Public License <https://www.gnu.org/licenses/gpl.html>.
# There is NO WARRANTY, to the extent permitted by law.
#

tmpdir=~/
use_color=Y
auto_unflag=Y
auto_vote=N
auto_notify=Y

if [ ! -r ~/.config/aurup ]; then
   echo "You should create ~/.config/aurup with inside:"
   echo "user=YOUR_AUR_USERNAME"
   echo "pass=YOUR_AUR_PASS"
   echo "to avoid manual input of these data."
   echo
   echo -n "Your AUR username: "
   read user
   echo
   echo -n "Your AUR password: "
   read -s pass
   echo
else
   source ~/.config/aurup
fi

msg() {
   if [ "$use_color" = "Y" -o "$use_color" = "y" ]; then
      echo -e "\033[1;32m${1}\033[1;0m" >&2
   else
      echo "$1" >&2
   fi
} #end of msg()

error() {
   if [ "$use_color" = "Y" -o "$use_color" = "y" ]; then
      echo -e "\033[1;31mERROR: ${1}\033[1;0m" >&2
   else
      echo "ERROR: $1" >&2
   fi
} #end of error()

usage() {
   echo "aurup - version $ver"
   echo
   echo "usage: $0 pkgfile.tar.gz category"
   echo
   echo "pkgfile.tar.gz  ==  tar.gz with PKGBUILD inside to send"
   echo "                    (autarchy or makepkg --source can be used)"
   echo "category ==  category of the package"
   echo
   echo "$0 -h        shows this help"
   echo "$0 -l        list available category"
   echo "$0 -c        check for out-of-date packages"
   echo
} # end of usage()

list_cat() {
   echo "Category List:"
   echo
   echo "daemons"
   echo "devel"
   echo "editors"
   echo "emulators"
   echo "games"
   echo "gnome"
   echo "i18n"
   echo "kde"
   echo "lib"
   echo "modules"
   echo "multimedia"
   echo "network"
   echo "office"
   echo "science"
   echo "system"
   echo "x11"
   echo "xfce"
   echo "kernels"
   echo
} # end of list_cat()

aur_login(){
curl -c $tmpdir/.aurup.cookies -d "user=${user}&passwd=${pass}" https://aur.archlinux.org/index.php &>/dev/null
login=`curl -s -b $tmpdir/.aurup.cookies -d "user=${user}&passwd=${pass}" https://aur.archlinux.org/index.php | grep -c "Bad username or password"`
[ $login = "1" ] && echo "Bad username or password" && exit
}


aur_action(){
# do_Notify / do_UnNotify
# do_Flag   / do_UnFlag
# do_Adopt  / do_Disown
# do_Vote   / do_UnVote
# do_Delete
# do_MyPackages
  action=$1
  pkgid=$2
  aur_login
  if [[ $action == "do_MyPackages" ]]; then
	  curl -b $tmpdir/.aurup.cookies "https://aur.archlinux.org/packages.php?SeB=m&K=${user}&PP=100" 2>/dev/null
  else
	  curl -b $tmpdir/.aurup.cookies -d "IDs[${pkgid}]=1&ID=${pkgid}&${action}=1" https://aur.archlinux.org/packages.php 2>/dev/null
  fi
} # end of aur_action()


id_finder(){
pkgname=$1
#curl -F K=${pkgname} -F PP=100 https://aur.archlinux.org/packages.php 2>/dev/null > $tmpdir/.aurup1.tmp
curl https://aur.archlinux.org/packages.php?K=${pkgname} 2>/dev/null > $tmpdir/.aurup1.tmp
for id in `cat $tmpdir/.aurup1.tmp | grep href | grep packages\.php | grep ID | cut -d\' -f 6 | cut -d\= -f2`; do
   url="https://aur.archlinux.org/packages.php?do_Details=1&ID=${id}"
   links -dump $url > $tmpdir/.aurup2.tmp
   name=`cat $tmpdir/.aurup2.tmp | awk '/Package Details/,/Maintainer: /' | head -3 | tail -1 | awk '{ print $1 }'`
   if [[ $name == ${pkgname} ]]; then
      echo $id
      break
   fi
done
}


check_ood(){
  aur_login
  aur_action do_MyPackages  >$tmpdir/.aurup4.tmp
  out_ood(){
     for idood in `grep "outofdate"  $tmpdir/.aurup4.tmp | egrep -o "\[[0-9]{1,}\]" | egrep -o "[0-9]{1,}"`; do
	name=`grep ID=${idood} $tmpdir/.aurup4.tmp | html2text | cut -d\  -f1`
        echo -e "$name \t\t\t it's flagged out-of-date"
     done
  }
  out=`out_ood`
  if [[ "$out" == "" ]]; then
     echo "No package is flagged out-of-date"
  else
     echo "$out"
  fi
  exit 0
}

aur_cat_finder() {
   #curl -F K=${pkgname} -F PP=100 https://aur.archlinux.org/packages.php 2>/dev/null > $tmpdir/.aurup1.tmp
   curl https://aur.archlinux.org/packages.php?K=${pkgname} 2>/dev/null > $tmpdir/.aurup1.tmp
   for id in `cat $tmpdir/.aurup1.tmp |  grep href | grep packages\.php | grep ID | cut -d\' -f 6 | cut -d\= -f2`; do
      url="https://aur.archlinux.org/packages.php?do_Details=1&ID=${id}"
      links -dump $url > $tmpdir/.aurup2.tmp
      name=`cat $tmpdir/.aurup2.tmp | awk '/Package Details/,/Maintainer: /' | head -3 \
      | tail -1 | awk '{ print $1 }'`
      if [[ $name == ${pkgname} ]]; then
#	 category=`cat $tmpdir/.aurup2.tmp  | awk '/Package Details/,/Maintainer: /' \
#         | tail -2 | head -1 | awk '{ print $3 }'`
	 category=`cat $tmpdir/.aurup2.tmp  | awk '/Package Details/,/Maintainer: /' | tail -2 | head -1 | awk '{ print $3 }'`
         echo "$category"
         break
      fi
   done
   rm -f $tmpdir/.aurup{1,2}.tmp
} #end of aur_cat_finder()

send(){
   aur_login
   curl -H "Expect:" -b $tmpdir/.aurup.cookies -F pkgsubmit=1 -F MAX_FILE_SIZE=2097152 -F category="${num_category}" -F pfile="@${pkgfile}"  https://aur.archlinux.org/pkgsubmit.php 2>/dev/null > $tmpdir/.aurup3.tmp
   rm -f $tmpdir/.aurup.cookies
} #end of send()

print_message(){
 if [[ `grep error $tmpdir/.aurup3.tmp` ]]; then
   message="`grep error $tmpdir/.aurup3.tmp | html2text`"
   error "$message"
else
   message="`grep \/center $tmpdir/.aurup3.tmp |html2text`"
   pkgid=`id_finder ${pkgname}`
   if [[ $auto_unflag == "Y" || $auto_unflag == "y" ]]; then
      aur_action do_UnFlag $pkgid &>/dev/null
      message="$message (unflagged out of date)"
   fi
   if [[ $auto_vote   == "Y" || $auto_vote == "y" ]]; then
      aur_action do_Vote $pkgid &>/dev/null
      message="$message (voted)"
   fi
   if [[ $auto_notify   == "Y" || $auto_notify == "y" ]]; then
      aur_action do_Notify $pkgid &>/dev/null
      message="$message (added to notify list)"
   fi
   msg "${message}"
fi
#echo $message
#rm -f $tmpdir/.aurup3.tmp
} # end of print_message()

if [[ $1 == "-h" || $1 == "--help" ]]; then  usage;  exit 0; fi
if [[ $1 == "-l" || $1 == "--list" ]]; then  list_cat;  exit 0; fi
if [[ $1 == "-c" || $1 == "--check-out-of-date" ]]; then check_ood;  fi
if [[ $# != 2 ]]; then error "wrong number of parameters" 1>&2 ; usage; exit -1; fi
if [[ ! -f $1 ]]; then error "$1 does not exist" 1>&2; exit -4; fi

pkgfile="$1"
category="$2"
pkgname=`basename $1 .tar.gz`
pkgname=`echo $pkgname | sed -re 's|^(.*)-[^-]+-[^-]+\.src\$|\1|'`
echo -n "$pkgname: "

#pkgname_len=`echo $pkgname | wc -c`
#if [[ $pkgname_len -gt 32 ]]; then error "pkgname is longer than 32 characters, and this is not allowed in AUR"; exit -6; fi

num_category=0
i=2
for categ in daemons devel editors emulators games gnome i18n kde \
   lib modules multimedia network office science system x11 xfce kernels; do
   if [[ $category == $categ ]]; then num_category=$i; fi
   let i++
done

if [[ $num_category == 0 ]]; then
   error "insert a valid category name" 1>&2
else
   send
   print_message
fi

